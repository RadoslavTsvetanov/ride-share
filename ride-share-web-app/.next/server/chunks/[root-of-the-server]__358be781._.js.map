{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;;AAEO,MAAM,MAAM,IAAA,qKAAS,EAAC;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,2GAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,2GAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6IAAY,CAAC;QACf,KACE,0GAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport { type CreateNextContextOptions } from \"@trpc/server/adapters/next\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n */\n\ntype CreateContextOptions = Record<string, never>;\n\n/**\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\n * it from here.\n *\n * Examples of things you may need it for:\n * - testing, so we don't have to mock Next.js' req/res\n * - tRPC's `createSSGHelpers`, where we don't have req/res\n *\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\n */\nconst createInnerTRPCContext = (_opts: CreateContextOptions) => {\n  return {\n    db,\n  };\n};\n\n/**\n * This is the actual context you will use in your router. It will be used to process every request\n * that goes through your tRPC endpoint.\n *\n * @see https://trpc.io/docs/context\n */\nexport const createTRPCContext = (_opts: CreateNextContextOptions) => {\n  return createInnerTRPCContext({});\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;AACD;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;CASC,GACD,MAAM,yBAAyB,CAAC;IAC9B,OAAO;QACL,IAAA,kHAAE;IACJ;AACF;AAQO,MAAM,oBAAoB,CAAC;IAChC,OAAO,uBAAuB,CAAC;AACjC;AAEA;;;;;;CAMC,GAED,MAAM,IAAI,4IAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,6HAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,kHAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nfunction toISO8601(datetime: string) {\n  // If string is missing seconds, append \":00\"\n  if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/.test(datetime)) {\n    datetime += \":00\";\n  }\n  // Optional: force UTC with \"Z\" at the end\n  if (!datetime.endsWith(\"Z\") && !/[+-]\\d{2}:\\d{2}$/.test(datetime)) {\n    datetime += \"Z\";\n  }\n  return datetime;\n}\n\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n\n// make it so that in the future it accepts options for either end destinaton, start destination, both, or all in a certain radius\n\n  getRidesOpportunities: publicProcedure\n    .query(async ({ ctx }) => {\n      // const rides = await ctx.db.rideOpportunity.findMany({\n      //   orderBy: { createdAt: \"desc\" },\n      //   include: {\n      //     driver: true,\n      //   }\n      // });\n\n\n      const rides = [\n        {\n          id: 1,\n          startLat: 38.907132,\n          startLng: -77.036546,\n          endLat: 38.911132,\n          endLng: -77.041546,\n          stops: [\n            [38.907132, -77.036546],\n            [38.911132, -77.041546],\n          ],\n          driver: {\n            id: 1,\n            name: 'John Doe',\n            email: 'john@example.com',\n            phoneNumber: '123-456-7890',\n          },\n        },\n        {\n          id: 2,\n          startLat: 38.909132,\n          startLng: -77.039546,\n          endLat: 38.912132,\n          endLng: -77.042546,\n          stops: [\n            [38.909132, -77.039546],\n            [38.912132, -77.042546],\n          ],\n          driver: {\n            id: 2,\n            name: 'Jane Smith',\n            email: 'jane@example.com',\n            phoneNumber: '098-765-4321',\n          },\n        },\n      ];\n\n      return rides;\n  }),\n\n\n  getRideRequests: publicProcedure\n  .query(async ({ ctx }) => {\n    const rideRequests = await ctx.db.rideRequest.findMany({\n      orderBy: { createdAt: \"desc\" },\n      include: {\n        passenger: true,\n      }\n    });\n    return rideRequests;\n  }),\n\n  createRideRequest: publicProcedure\n  .input(z.object({\n    startLat: z.number(),\n    startLng: z.number(),\n    endLat: z.number(),\n    endLng: z.number(),\n    passengerId: z.string(),\n    arrivalTime: z.string(),\n  }))\n  .mutation(async ({ ctx, input }) => {\n    const rideRequest = await ctx.db.rideRequest.create({\n      data: {\n        startLat: input.startLat,\n        startLng: input.startLng,\n        endLat: input.endLat,\n        endLng: input.endLng,\n        passengerId: input.passengerId,\n        arrivalTime: toISO8601(input.arrivalTime),\n      },\n    });\n    return rideRequest;\n  })\n});\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;;;;;AAEA,SAAS,UAAU,QAAgB;IACjC,6CAA6C;IAC7C,IAAI,kCAAkC,IAAI,CAAC,WAAW;QACpD,YAAY;IACd;IACA,0CAA0C;IAC1C,IAAI,CAAC,SAAS,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,IAAI,CAAC,WAAW;QACjE,YAAY;IACd;IACA,OAAO;AACT;AAGO,MAAM,aAAa,IAAA,yIAAgB,EAAC;IACzC,OAAO,wIAAe,CACnB,KAAK,CAAC,2GAAC,CAAC,MAAM,CAAC;QAAE,MAAM,2GAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAGJ,kIAAkI;IAEhI,uBAAuB,wIAAe,CACnC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,wDAAwD;QACxD,oCAAoC;QACpC,eAAe;QACf,oBAAoB;QACpB,MAAM;QACN,MAAM;QAGN,MAAM,QAAQ;YACZ;gBACE,IAAI;gBACJ,UAAU;gBACV,UAAU,CAAC;gBACX,QAAQ;gBACR,QAAQ,CAAC;gBACT,OAAO;oBACL;wBAAC;wBAAW,CAAC;qBAAU;oBACvB;wBAAC;wBAAW,CAAC;qBAAU;iBACxB;gBACD,QAAQ;oBACN,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,aAAa;gBACf;YACF;YACA;gBACE,IAAI;gBACJ,UAAU;gBACV,UAAU,CAAC;gBACX,QAAQ;gBACR,QAAQ,CAAC;gBACT,OAAO;oBACL;wBAAC;wBAAW,CAAC;qBAAU;oBACvB;wBAAC;wBAAW,CAAC;qBAAU;iBACxB;gBACD,QAAQ;oBACN,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,aAAa;gBACf;YACF;SACD;QAED,OAAO;IACX;IAGA,iBAAiB,wIAAe,CAC/B,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,MAAM,eAAe,MAAM,IAAI,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC;YACrD,SAAS;gBAAE,WAAW;YAAO;YAC7B,SAAS;gBACP,WAAW;YACb;QACF;QACA,OAAO;IACT;IAEA,mBAAmB,wIAAe,CACjC,KAAK,CAAC,2GAAC,CAAC,MAAM,CAAC;QACd,UAAU,2GAAC,CAAC,MAAM;QAClB,UAAU,2GAAC,CAAC,MAAM;QAClB,QAAQ,2GAAC,CAAC,MAAM;QAChB,QAAQ,2GAAC,CAAC,MAAM;QAChB,aAAa,2GAAC,CAAC,MAAM;QACrB,aAAa,2GAAC,CAAC,MAAM;IACvB,IACC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,cAAc,MAAM,IAAI,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC;YAClD,MAAM;gBACJ,UAAU,MAAM,QAAQ;gBACxB,UAAU,MAAM,QAAQ;gBACxB,QAAQ,MAAM,MAAM;gBACpB,QAAQ,MAAM,MAAM;gBACpB,aAAa,MAAM,WAAW;gBAC9B,aAAa,UAAU,MAAM,WAAW;YAC1C;QACF;QACA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;;;;;;AAOO,MAAM,YAAY,IAAA,yIAAgB,EAAC;IACxC,MAAM,8IAAU;AAClB;AAYO,MAAM,eAAe,IAAA,4IAAmB,EAAC","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///home/rado/Desktop/Projects/ride-share/ride-share-web-app/src/pages/api/trpc/%5Btrpc%5D.ts"],"sourcesContent":["import { createNextApiHandler } from \"@trpc/server/adapters/next\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n// export API handler\nexport default createNextApiHandler({\n  router: appRouter,\n  createContext: createTRPCContext,\n  onError:\n    env.NODE_ENV === \"development\"\n      ? ({ path, error }) => {\n          console.error(\n            `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\n          );\n        }\n      : undefined,\n});\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;uCAGe,IAAA,gMAAoB,EAAC;IAClC,QAAQ,kIAAS;IACjB,eAAe,0IAAiB;IAChC,SACE,0GAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;QACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;IAE/D,IACA;AACR","debugId":null}}]
}