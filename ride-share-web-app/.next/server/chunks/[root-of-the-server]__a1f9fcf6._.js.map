{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\r\nimport { z } from \"zod\";\r\n\r\nexport const env = createEnv({\r\n  /**\r\n   * Specify your server-side environment variables schema here. This way you can ensure the app\r\n   * isn't built with invalid env vars.\r\n   */\r\n  server: {\r\n    DATABASE_URL: z.string().url(),\r\n    NODE_ENV: z\r\n      .enum([\"development\", \"test\", \"production\"])\r\n      .default(\"development\"),\r\n  },\r\n\r\n  /**\r\n   * Specify your client-side environment variables schema here. This way you can ensure the app\r\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\r\n   * `NEXT_PUBLIC_`.\r\n   */\r\n  client: {\r\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\r\n  },\r\n\r\n  /**\r\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\r\n   * middlewares) or client-side so we need to destruct manually.\r\n   */\r\n  runtimeEnv: {\r\n    DATABASE_URL: process.env.DATABASE_URL,\r\n    NODE_ENV: process.env.NODE_ENV,\r\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\r\n  },\r\n  /**\r\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\r\n   * useful for Docker builds.\r\n   */\r\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\r\n  /**\r\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\r\n   * `SOME_VAR=''` will throw an error.\r\n   */\r\n  emptyStringAsUndefined: true,\r\n});\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;;AAEO,MAAM,MAAM,IAAA,qKAAS,EAAC;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,2GAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,2GAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nimport { env } from \"~/env\";\r\n\r\nconst createPrismaClient = () =>\r\n  new PrismaClient({\r\n    log:\r\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\r\n  });\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\r\n};\r\n\r\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\r\n\r\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6IAAY,CAAC;QACf,KACE,uKAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,uKAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/server/api/trpc.ts"],"sourcesContent":["/**\r\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\r\n * 1. You want to modify request context (see Part 1).\r\n * 2. You want to create a new middleware or type of procedure (see Part 3).\r\n *\r\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\r\n * need to use are documented accordingly near the end.\r\n */\r\nimport { initTRPC } from \"@trpc/server\";\r\nimport { type CreateNextContextOptions } from \"@trpc/server/adapters/next\";\r\nimport superjson from \"superjson\";\r\nimport { ZodError } from \"zod\";\r\n\r\nimport { db } from \"~/server/db\";\r\n\r\n/**\r\n * 1. CONTEXT\r\n *\r\n * This section defines the \"contexts\" that are available in the backend API.\r\n *\r\n * These allow you to access things when processing a request, like the database, the session, etc.\r\n */\r\n\r\ntype CreateContextOptions = Record<string, never>;\r\n\r\n/**\r\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\r\n * it from here.\r\n *\r\n * Examples of things you may need it for:\r\n * - testing, so we don't have to mock Next.js' req/res\r\n * - tRPC's `createSSGHelpers`, where we don't have req/res\r\n *\r\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\r\n */\r\nconst createInnerTRPCContext = (_opts: CreateContextOptions) => {\r\n  return {\r\n    db,\r\n  };\r\n};\r\n\r\n/**\r\n * This is the actual context you will use in your router. It will be used to process every request\r\n * that goes through your tRPC endpoint.\r\n *\r\n * @see https://trpc.io/docs/context\r\n */\r\nexport const createTRPCContext = (_opts: CreateNextContextOptions) => {\r\n  return createInnerTRPCContext({});\r\n};\r\n\r\n/**\r\n * 2. INITIALIZATION\r\n *\r\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\r\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\r\n * errors on the backend.\r\n */\r\n\r\nconst t = initTRPC.context<typeof createTRPCContext>().create({\r\n  transformer: superjson,\r\n  errorFormatter({ shape, error }) {\r\n    return {\r\n      ...shape,\r\n      data: {\r\n        ...shape.data,\r\n        zodError:\r\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\n/**\r\n * Create a server-side caller.\r\n *\r\n * @see https://trpc.io/docs/server/server-side-calls\r\n */\r\nexport const createCallerFactory = t.createCallerFactory;\r\n\r\n/**\r\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\r\n *\r\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\r\n * \"/src/server/api/routers\" directory.\r\n */\r\n\r\n/**\r\n * This is how you create new routers and sub-routers in your tRPC API.\r\n *\r\n * @see https://trpc.io/docs/router\r\n */\r\nexport const createTRPCRouter = t.router;\r\n\r\n/**\r\n * Middleware for timing procedure execution and adding an artificial delay in development.\r\n *\r\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\r\n * network latency that would occur in production but not in local development.\r\n */\r\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\r\n  const start = Date.now();\r\n\r\n  if (t._config.isDev) {\r\n    // artificial delay in dev\r\n    const waitMs = Math.floor(Math.random() * 400) + 100;\r\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\r\n  }\r\n\r\n  const result = await next();\r\n\r\n  const end = Date.now();\r\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\r\n\r\n  return result;\r\n});\r\n\r\n/**\r\n * Public (unauthenticated) procedure\r\n *\r\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\r\n * guarantee that a user querying is authorized, but you can still access user session data if they\r\n * are logged in.\r\n */\r\nexport const publicProcedure = t.procedure.use(timingMiddleware);\r\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;AACD;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;CASC,GACD,MAAM,yBAAyB,CAAC;IAC9B,OAAO;QACL,IAAA,+KAAE;IACJ;AACF;AAQO,MAAM,oBAAoB,CAAC;IAChC,OAAO,uBAAuB,CAAC;AACjC;AAEA;;;;;;CAMC,GAED,MAAM,IAAI,4IAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,6HAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,kHAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\r\n\r\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\r\n\r\nexport const postRouter = createTRPCRouter({\r\n  hello: publicProcedure\r\n    .input(z.object({ text: z.string() }))\r\n    .query(({ input }) => {\r\n      return {\r\n        greeting: `Hello ${input.text}`,\r\n      };\r\n    }),\r\n\r\n  create: publicProcedure\r\n    .input(z.object({ name: z.string().min(1) }))\r\n    .mutation(async ({ ctx, input }) => {\r\n      return ctx.db.post.create({\r\n        data: {\r\n          name: input.name,\r\n        },\r\n      });\r\n    }),\r\n\r\n  getLatest: publicProcedure.query(async ({ ctx }) => {\r\n    const post = await ctx.db.post.findFirst({\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    return post ?? null;\r\n  }),\r\n});\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;;;;;AAEO,MAAM,aAAa,IAAA,sMAAgB,EAAC;IACzC,OAAO,qMAAe,CACnB,KAAK,CAAC,2GAAC,CAAC,MAAM,CAAC;QAAE,MAAM,2GAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,qMAAe,CACpB,KAAK,CAAC,2GAAC,CAAC,MAAM,CAAC;QAAE,MAAM,2GAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACJ,MAAM,MAAM,IAAI;YAClB;QACF;IACF;IAEF,WAAW,qMAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,OAAO,QAAQ;IACjB;AACF","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\r\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\r\n\r\n/**\r\n * This is the primary router for your server.\r\n *\r\n * All routers added in /api/routers should be manually added here.\r\n */\r\nexport const appRouter = createTRPCRouter({\r\n  post: postRouter,\r\n});\r\n\r\n// export type definition of API\r\nexport type AppRouter = typeof appRouter;\r\n\r\n/**\r\n * Create a server-side caller for the tRPC API.\r\n * @example\r\n * const trpc = createCaller(createContext);\r\n * const res = await trpc.post.all();\r\n *       ^? Post[]\r\n */\r\nexport const createCaller = createCallerFactory(appRouter);\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;;;;;;AAOO,MAAM,YAAY,IAAA,sMAAgB,EAAC;IACxC,MAAM,2MAAU;AAClB;AAYO,MAAM,eAAe,IAAA,yMAAmB,EAAC","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/pages/api/trpc/%5Btrpc%5D.ts"],"sourcesContent":["import { createNextApiHandler } from \"@trpc/server/adapters/next\";\r\n\r\nimport { env } from \"~/env\";\r\nimport { appRouter } from \"~/server/api/root\";\r\nimport { createTRPCContext } from \"~/server/api/trpc\";\r\n\r\n// export API handler\r\nexport default createNextApiHandler({\r\n  router: appRouter,\r\n  createContext: createTRPCContext,\r\n  onError:\r\n    env.NODE_ENV === \"development\"\r\n      ? ({ path, error }) => {\r\n          console.error(\r\n            `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\r\n          );\r\n        }\r\n      : undefined,\r\n});\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;uCAGe,IAAA,gMAAoB,EAAC;IAClC,QAAQ,+LAAS;IACjB,eAAe,uMAAiB;IAChC,SACE,uKAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;QACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;IAE/D,IACA;AACR","debugId":null}}]
}