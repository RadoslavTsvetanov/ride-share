{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 9, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_3057a15e.module.css [ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_3057a15e-module__mmrLSa__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_3057a15e.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22_app.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22geist%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,yJAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,yJAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,yJAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/utils/api.ts"],"sourcesContent":["/**\r\n * This is the client-side entrypoint for your tRPC API. It is used to create the `api` object which\r\n * contains the Next.js App-wrapper, as well as your type-safe React Query hooks.\r\n *\r\n * We also create a few inference helpers for input and output types.\r\n */\r\nimport { httpBatchLink, loggerLink } from \"@trpc/client\";\r\nimport { createTRPCNext } from \"@trpc/next\";\r\nimport { type inferRouterInputs, type inferRouterOutputs } from \"@trpc/server\";\r\nimport superjson from \"superjson\";\r\n\r\nimport { type AppRouter } from \"~/server/api/root\";\r\n\r\nconst getBaseUrl = () => {\r\n  if (typeof window !== \"undefined\") return \"\"; // browser should use relative url\r\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url\r\n  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost\r\n};\r\n\r\n/** A set of type-safe react-query hooks for your tRPC API. */\r\nexport const api = createTRPCNext<AppRouter>({\r\n  config() {\r\n    return {\r\n      /**\r\n       * Links used to determine request flow from client to server.\r\n       *\r\n       * @see https://trpc.io/docs/links\r\n       */\r\n      links: [\r\n        loggerLink({\r\n          enabled: (opts) =>\r\n            process.env.NODE_ENV === \"development\" ||\r\n            (opts.direction === \"down\" && opts.result instanceof Error),\r\n        }),\r\n        httpBatchLink({\r\n          /**\r\n           * Transformer used for data de-serialization from the server.\r\n           *\r\n           * @see https://trpc.io/docs/data-transformers\r\n           */\r\n          transformer: superjson,\r\n          url: `${getBaseUrl()}/api/trpc`,\r\n        }),\r\n      ],\r\n    };\r\n  },\r\n  /**\r\n   * Whether tRPC should await queries when server rendering pages.\r\n   *\r\n   * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false\r\n   */\r\n  ssr: false,\r\n  transformer: superjson,\r\n});\r\n\r\n/**\r\n * Inference helper for inputs.\r\n *\r\n * @example type HelloInput = RouterInputs['example']['hello']\r\n */\r\nexport type RouterInputs = inferRouterInputs<AppRouter>;\r\n\r\n/**\r\n * Inference helper for outputs.\r\n *\r\n * @example type HelloOutput = RouterOutputs['example']['hello']\r\n */\r\nexport type RouterOutputs = inferRouterOutputs<AppRouter>;\r\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AACD;AACA;AAEA;;;;;;;;;;AAIA,MAAM,aAAa;IACjB;;KAA8C,kCAAkC;IAChF,IAAI,QAAQ,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,UAAU,EAAE,EAAE,4BAA4B;IACpG,OAAO,CAAC,iBAAiB,EAAE,QAAQ,GAAG,CAAC,IAAI,IAAI,MAAM,EAAE,+BAA+B;AACxF;AAGO,MAAM,MAAM,IAAA,8IAAc,EAAY;IAC3C;QACE,OAAO;YACL;;;;OAIC,GACD,OAAO;gBACL,IAAA,8IAAU,EAAC;oBACT,SAAS,CAAC,OACR,oDAAyB,iBACxB,KAAK,SAAS,KAAK,UAAU,KAAK,MAAM,YAAY;gBACzD;gBACA,IAAA,iJAAa,EAAC;oBACZ;;;;WAIC,GACD,aAAa,6HAAS;oBACtB,KAAK,GAAG,aAAa,SAAS,CAAC;gBACjC;aACD;QACH;IACF;IACA;;;;GAIC,GACD,KAAK;IACL,aAAa,6HAAS;AACxB","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Legion/Documents/ride-share/ride-share-web-app/src/pages/_app.tsx"],"sourcesContent":["import { type AppType } from \"next/app\";\r\nimport { Geist } from \"next/font/google\";\r\n\r\nimport { api } from \"~/utils/api\";\r\n\r\nimport \"~/styles/globals.css\";\r\n\r\nconst geist = Geist({\r\n  subsets: [\"latin\"],\r\n});\r\n\r\nconst MyApp: AppType = ({ Component, pageProps }) => {\r\n  return (\r\n    <div className={geist.className}>\r\n      <Component {...pageProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default api.withTRPC(MyApp);\r\n"],"names":[],"mappings":";;;;;;AAGA;;;;;;;;;AAQA,MAAM,QAAiB,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE;IAC9C,qBACE,qKAAC;QAAI,WAAW,6IAAK,CAAC,SAAS;kBAC7B,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B;uCAEe,gLAAG,CAAC,QAAQ,CAAC","debugId":null}}]
}